@model MyChat.Models.Room
@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

<h2>
    <span style="color: whitesmoke">@User.Identity?.Name</span>, welcome to the room "<span style=" color: whitesmoke">@Model?.Name</span>"
</h2>

@*@if(User.Identity.IsAuthenticated){
<vc:room></vc:room>
}*@
<div class="chat">
    <div class="chat-body">
        @foreach (var message in @Model!.Messages)
        {
            <div class="message">
                <header>@message.Name:</header>
                <p>@message.Text</p>
                <footer>@message.When</footer>
            </div>
        }
    </div>

    <form asp-action="Send" method="post" asp-controller="Rooms" class="chat-input" onsubmit="sendMessage">
        <input type="hidden" name="roomId" id="roomId" value="@Model.Id">
        <input type="text" class="text-dark " name="message" id="message" required="required">
        <input type="hidden" name="roomName" id="roomName" value="@Model.Name">
        <button type="submit" class="btn-dark send-button" name="sendButton" id="sendButton">Send</button>
    </form>

</div>
@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script>
        //Disable the send button until connection is established.
        document.getElementById("sendButton").disabled = true;
        
        var connection = new signalR.HubConnectionBuilder()
                                    .withUrl("/chatHub")
                                    .build();
        var _connectionId = '';
        connection.on("ReceiveMessage", function (data){
            console.log(data);
        })
        /*connection.on("ReceiveMessage", function (user, message) {
            var li = document.createElement("li");
            document.getElementById("messagesList").appendChild(li);
            // We can assign user-supplied strings to an element's textContent because it
            // is not interpreted as markup. If you're assigning in any other way, you 
            // should be aware of possible script injection concerns.
            li.textContent = `${user} says ${message}`;
        });*/
        
        /*var joinRoom = function (){
            fetch("https://localhost:7096/Chat/JoinRoom/"+_connectionId+"/@Model.Name", {
                method: 'POST'               
            })
                .then(res => {
                    console.log("Room Joined", res);
                })
                .catch(err => {
                    console.log("FAILED!", err);
                })
        }*/
        
        connection.start()
            .then(function () {
                document.getElementById("sendButton").disabled = false
                .then(function() {
                       connection.invoke('joinRoom', '@Model.Name')           
                })
            })
            .catch(function (err) {
                console.log(err)
            })
            
        document.getElementById("sendButton").addEventListener("submit", function (event) {
            var roomId = document.getElementById("roomId").value;
            var message = document.getElementById("message").value;
            var roomName = document.getElementById("roomName").value;
            connection.invoke("SendMessage", roomId, message, roomName).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        });
            
        /*var sendMessage = function (event){
            event.preventDefault();//страница не обновляется
            var data = new FormData(event.target);            
            
            connection.invoke('sendMessage', data)
                .then(res => {
                  console.log("Message Sent!") 
                })
                .catch(err => {
                    console.log("Failure to send message")
                })
        }*/
       
    </script>
}